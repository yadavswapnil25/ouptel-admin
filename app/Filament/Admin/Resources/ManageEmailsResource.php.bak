<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\ManageEmailsResource\Pages;
use App\Models\EmailTemplate;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\RichEditor;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Actions\CreateAction;

class ManageEmailsResource extends Resource
{
    protected static ?string $model = EmailTemplate::class;

    protected static ?string $navigationIcon = 'heroicon-o-envelope';

    protected static ?string $navigationLabel = 'Manage Emails';

    protected static ?string $navigationGroup = 'Tools';

    protected static ?int $navigationSort = 1;

    protected static ?string $modelLabel = 'Email Template';

    protected static ?string $pluralModelLabel = 'Email Templates';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Email Template Details')
                    ->schema([
                        Select::make('email_to')
                            ->label('Template Type')
                            ->options(EmailTemplate::getTemplateTypes())
                            ->required()
                            ->searchable()
                            ->placeholder('Select email template type')
                            ->helperText('Choose the type of email template to manage'),

                        TextInput::make('subject')
                            ->label('Email Subject')
                            ->required()
                            ->maxLength(255)
                            ->placeholder('Enter email subject')
                            ->helperText('The subject line for this email template'),

                        RichEditor::make('message')
                            ->label('Email Content')
                            ->required()
                            ->toolbarButtons([
                                'bold',
                                'italic',
                                'underline',
                                'strike',
                                'link',
                                'bulletList',
                                'orderedList',
                                'h2',
                                'h3',
                                'blockquote',
                                'codeBlock',
                            ])
                            ->placeholder('Enter email content here...')
                            ->helperText('Use HTML tags for formatting. Available variables: {{USERNAME}}, {{SITE_URL}}, {{EMAIL}}, {{CODE}}, {{SITE_NAME}}, {{FIRST_NAME}}, {{NAME}}, {{URL}}, {{BACKGOUND_COLOR}}, {{NOTIFY_URL}}, {{NOTIFY_AVATAR}}, {{NOTIFY_NAME}}, {{TEXT_TYPE}}, {{TEXT}}, {{LINK}}, {{DATE}}, {{COUNTRY_CODE}}, {{IP_ADDRESS}}, {{CITY}}, {{amount}}, {{name}}')
                            ->columnSpanFull(),
                    ])
                    ->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label('ID')
                    ->sortable()
                    ->searchable(),

                TextColumn::make('template_name')
                    ->label('Template Type')
                    ->getStateUsing(fn ($record) => $record->template_name)
                    ->sortable()
                    ->searchable()
                    ->badge()
                    ->color('primary'),

                TextColumn::make('subject')
                    ->label('Subject')
                    ->sortable()
                    ->searchable()
                    ->limit(50)
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = $column->getState();
                        return strlen($state) > 50 ? $state : null;
                    }),

                TextColumn::make('message')
                    ->label('Content Preview')
                    ->html()
                    ->limit(100)
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = strip_tags($column->getState());
                        return strlen($state) > 100 ? $state : null;
                    }),

                IconColumn::make('has_content')
                    ->label('Has Content')
                    ->getStateUsing(fn ($record) => !empty($record->message))
                    ->boolean()
                    ->trueIcon('heroicon-o-check-circle')
                    ->falseIcon('heroicon-o-x-circle')
                    ->trueColor('success')
                    ->falseColor('danger'),
            ])
            ->filters([
                SelectFilter::make('email_to')
                    ->label('Template Type')
                    ->options(EmailTemplate::getTemplateTypes())
                    ->searchable(),
            ])
            ->actions([
                ActionGroup::make([
                    ViewAction::make(),
                    EditAction::make(),
                    DeleteAction::make(),
                ]),
            ])
            ->bulkActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make(),
                ]),
            ])
            ->headerActions([
                CreateAction::make(),
            ])
            ->defaultSort('id', 'desc')
            ->paginated([10, 25, 50])
            ->defaultPaginationPageOption(10);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListManageEmails::route('/'),
            'create' => Pages\CreateManageEmail::route('/create'),
            'view' => Pages\ViewManageEmail::route('/{record}'),
            'edit' => Pages\EditManageEmail::route('/{record}/edit'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }
}

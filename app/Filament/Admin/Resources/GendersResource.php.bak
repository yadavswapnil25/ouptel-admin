<?php

namespace App\Filament\Admin\Resources;

use App\Filament\Admin\Resources\GendersResource\Pages;
use App\Models\Gender;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BooleanColumn;
use Filament\Tables\Actions\ActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\EditAction;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Toggle;
use Filament\Tables\Filters\TernaryFilter;
use Illuminate\Support\Facades\DB;

class GendersResource extends Resource
{
    protected static ?string $model = Gender::class;

    protected static ?string $navigationIcon = 'heroicon-o-users';

    protected static ?string $navigationLabel = 'Manage Genders';

    protected static ?string $modelLabel = 'Gender';

    protected static ?string $pluralModelLabel = 'Genders';

    protected static ?string $navigationGroup = 'Users';

    protected static ?int $navigationSort = 5;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Gender Information')
                    ->schema([
                        TextInput::make('gender_id')
                            ->label('Gender ID')
                            ->maxLength(50)
                            ->required()
                            ->helperText('Unique identifier for this gender (e.g., male, female, other)'),

                        TextInput::make('image')
                            ->label('Image')
                            ->maxLength(300)
                            ->helperText('Image filename for this gender'),
                    ])
                    ->columns(2),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->modifyQueryUsing(function ($query) {
                // Since we're working with aggregated data, we'll use a different approach
                // We'll create a virtual model or use a different strategy
                return $query->whereRaw('1 = 0'); // This will return no results initially
            })
            ->columns([
                TextColumn::make('gender_id')
                    ->label('Gender ID')
                    ->searchable()
                    ->sortable()
                    ->weight('bold')
                    ->color('primary'),

                TextColumn::make('gender_name')
                    ->label('Gender Name')
                    ->getStateUsing(fn ($record) => \App\Models\Gender::getGenderName($record->gender_id))
                    ->searchable()
                    ->sortable(),

                TextColumn::make('users_count')
                    ->label('Users Count')
                    ->badge()
                    ->color('info')
                    ->sortable(),
            ])
            ->filters([
                //
            ])
            ->actions([
                ActionGroup::make([
                    ViewAction::make(),
                ]),
            ])
            ->bulkActions([
                //
            ])
            ->defaultSort('users_count', 'desc')
            ->paginated([10, 25, 50])
            ->defaultPaginationPageOption(10);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListGenders::route('/'),
            // Disable create and edit since we're working with aggregated data
        ];
    }
}
